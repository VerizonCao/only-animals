{"ast":null,"code":"var _jsxFileName = \"/Users/caoye/git/onlyfan-app/frontend/myfrontend/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport './ChatPage.css';\nimport axios from 'axios';\nimport catImage from '../resources/cat.webp';\nimport dogImage from '../resources/dog.webp';\nimport foxImage from '../resources/fox.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst animals = [{\n  id: 'cat',\n  image: catImage,\n  name: 'Cat'\n}, {\n  id: 'dog',\n  image: dogImage,\n  name: 'Dog'\n}, {\n  id: 'fox',\n  image: foxImage,\n  name: 'Fox'\n}];\n\n// Create axios instance with CSRF handling\n// only for local now\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Add this interceptor to handle CSRF tokens\napi.interceptors.request.use(function (config) {\n  var _document$cookie$spli;\n  const csrfToken = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken;\n  }\n  return config;\n});\nfunction ChatPage() {\n  _s();\n  var _location$state, _animals$find;\n  const {\n    animal\n  } = useParams();\n  const [message, setMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const location = useLocation();\n  const selectedModel = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedModel;\n  const fetchChatHistory = useCallback(async () => {\n    try {\n      const {\n        data\n      } = await api.get(`/chat/get_history/`, {\n        params: {\n          animal_type: animal\n        }\n      });\n      if (data.messages) {\n        const formattedHistory = data.messages.map(msg => ({\n          text: msg.content,\n          sender: msg.role === 'assistant' ? 'animal' : 'user'\n        }));\n        setChatHistory(formattedHistory);\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Error fetching chat history:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n    }\n  }, [animal]);\n  useEffect(() => {\n    fetchChatHistory();\n  }, [fetchChatHistory]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (message.trim()) {\n      // Check if message requires image generation\n      let isImageRequest = false;\n      try {\n        const {\n          data\n        } = await api.post('/chat/ai/is_image_request/', {\n          message: message\n        });\n        isImageRequest = Boolean(data);\n      } catch (error) {\n        console.error('Error checking image request:', error);\n      }\n\n      // send to chatting bots. \n      const newMessage = {\n        text: message,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setChatHistory([...chatHistory, newMessage]);\n      try {\n        const {\n          data\n        } = await api.post('/chat/chat/', {\n          message,\n          animal,\n          model: selectedModel\n        });\n\n        // Extract the content from the response\n        const responseContent = data.content || data; // Handle both object and string responses\n\n        // Call ImageGenerator API if this is an image request\n        let generatedImageUrl = null;\n        if (isImageRequest) {\n          try {\n            const imageResponse = await api.post('/chat/ai/generate_image/', {\n              prompt: typeof responseContent === 'string' ? responseContent : responseContent.content\n            });\n            generatedImageUrl = imageResponse.data.image_url;\n          } catch (error) {\n            console.error('Error generating image:', error);\n          }\n        }\n        setChatHistory(prev => [...prev, {\n          text: typeof responseContent === 'string' ? responseContent : responseContent.content,\n          sender: 'animal',\n          timestamp: new Date().toLocaleTimeString(),\n          imageUrl: generatedImageUrl\n        }]);\n      } catch (error) {\n        var _error$response3, _error$response4;\n        console.error('Error details:', {\n          message: error.message,\n          response: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n          status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status\n        });\n        setChatHistory(prev => {\n          var _error$response5;\n          return [...prev, {\n            text: `Error: ${((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) || 'Unknown'} - ${error.message}`,\n            sender: 'animal',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n      }\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"back-button\",\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Chat with \", animal]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: (_animals$find = animals.find(a => a.id === animal.toLowerCase())) === null || _animals$find === void 0 ? void 0 : _animals$find.image,\n      alt: `${animal} character`,\n      className: \"animal-avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), msg.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: msg.imageUrl,\n          alt: \"Generated content\",\n          className: \"generated-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: msg.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"4rw7CLs2EKX/XNgztU/jTD0aSXY=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["useState","useEffect","useCallback","useParams","Link","useLocation","axios","catImage","dogImage","foxImage","jsxDEV","_jsxDEV","animals","id","image","name","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","_document$cookie$spli","csrfToken","document","cookie","split","find","row","startsWith","ChatPage","_s","_location$state","_animals$find","animal","message","setMessage","chatHistory","setChatHistory","location","selectedModel","state","fetchChatHistory","data","get","params","animal_type","messages","formattedHistory","map","msg","text","content","sender","role","error","_error$response","_error$response2","console","response","status","handleSubmit","e","preventDefault","trim","isImageRequest","post","Boolean","newMessage","timestamp","Date","toLocaleTimeString","model","responseContent","generatedImageUrl","imageResponse","prompt","image_url","prev","imageUrl","_error$response3","_error$response4","_error$response5","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","src","a","toLowerCase","alt","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/caoye/git/onlyfan-app/frontend/myfrontend/src/components/ChatPage.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport './ChatPage.css';\nimport axios from 'axios';\n\nimport catImage from '../resources/cat.webp';\nimport dogImage from '../resources/dog.webp';\nimport foxImage from '../resources/fox.webp';\n\n\nconst animals = [\n  { id: 'cat', image: catImage, name: 'Cat' },\n  { id: 'dog', image: dogImage, name: 'Dog' },\n  { id: 'fox', image: foxImage, name: 'Fox' }\n];\n\n// Create axios instance with CSRF handling\n// only for local now\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\n// Add this interceptor to handle CSRF tokens\napi.interceptors.request.use(function (config) {\n  const csrfToken = document.cookie\n    .split('; ')\n    .find(row => row.startsWith('csrftoken='))\n    ?.split('=')[1];\n    \n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken;\n  }\n  return config;\n});\n\nfunction ChatPage() {\n  const { animal } = useParams();\n  const [message, setMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const location = useLocation();\n  const selectedModel = location.state?.selectedModel;\n\n  \n  const fetchChatHistory = useCallback(async () => {\n    try {\n      const { data } = await api.get(`/chat/get_history/`, {\n        params: {\n          animal_type: animal\n        }\n      });\n      \n      if (data.messages) {\n        const formattedHistory = data.messages.map(msg => ({\n          text: msg.content,\n          sender: msg.role === 'assistant' ? 'animal' : 'user'\n        }));\n        \n        setChatHistory(formattedHistory);\n      }\n    } catch (error) {\n      console.error('Error fetching chat history:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n    }\n  }, [animal]);\n\n  useEffect(() => {\n    fetchChatHistory();\n  }, [fetchChatHistory]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (message.trim()) {\n\n\n      // Check if message requires image generation\n      let isImageRequest = false;\n      try {\n        const { data } = await api.post('/chat/ai/is_image_request/', {\n          message: message\n        });\n        isImageRequest = Boolean(data);\n      } catch (error) {\n        console.error('Error checking image request:', error);\n      }\n\n\n\n      // send to chatting bots. \n      const newMessage = {\n        text: message,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      \n      setChatHistory([...chatHistory, newMessage]);\n\n      try {\n        const { data } = await api.post('/chat/chat/', {\n          message,\n          animal,\n          model: selectedModel\n        });\n        \n        // Extract the content from the response\n        const responseContent = data.content || data;  // Handle both object and string responses\n        \n        // Call ImageGenerator API if this is an image request\n        let generatedImageUrl = null;\n        if (isImageRequest) {\n          try {\n            const imageResponse = await api.post('/chat/ai/generate_image/', {\n              prompt: typeof responseContent === 'string' ? responseContent : responseContent.content\n            });\n            generatedImageUrl = imageResponse.data.image_url;\n          } catch (error) {\n            console.error('Error generating image:', error);\n          }\n        }\n        \n        setChatHistory(prev => [...prev, {\n          text: typeof responseContent === 'string' ? responseContent : responseContent.content,\n          sender: 'animal',\n          timestamp: new Date().toLocaleTimeString(),\n          imageUrl: generatedImageUrl\n        }]);\n      } catch (error) {\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        \n        setChatHistory(prev => [...prev, {\n          text: `Error: ${error.response?.status || 'Unknown'} - ${error.message}`,\n          sender: 'animal',\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n      }\n\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <Link to=\"/\" className=\"back-button\">← Back</Link>\n        <h2>Chat with {animal}</h2>\n      </div>\n      \n      <img \n        src={animals.find(a => a.id === animal.toLowerCase())?.image} \n        alt={`${animal} character`}\n        className=\"animal-avatar\"\n      />\n      \n      <div className=\"chat-history\">\n        {chatHistory.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender}`}>\n            <p>{msg.text}</p>\n            {msg.imageUrl && (\n              <img \n                src={msg.imageUrl} \n                alt=\"Generated content\" \n                className=\"generated-image\"\n              />\n            )}\n            <span className=\"timestamp\">{msg.timestamp}</span>\n          </div>\n        ))}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}